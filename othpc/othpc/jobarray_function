#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Copyright (C) EDF 2025

@authors: Elias Fekhari, Joseph Muré, Michaël Baudin
"""
import time
import othpc
import datetime
import openturns as ot
from simple_slurm import Slurm 
import openturns.coupling_tools as otct


class JobArrayFunction(ot.OpenTURNSPythonFunction):
    """
    TBD
    """
    def __init__(
        self,
        script_name,
        class_name, 
        class_args,# warning, it has to be a string 
        input_dim, 
        output_dim, 
        job_number=1,
        nodes_per_job=1,
        cpus_per_job=4,
        timeout_per_job=5,
        memory_per_job=512,
        slurm_wckey="P120K:SALOME",
        # slurm_extra_options=["--output=logs/output.log", "--error=logs/error.log"],
        # verbose=False,
    ):
        super().__init__(input_dim, output_dim)
        self.job_number = job_number
        self.nodes_per_job = nodes_per_job
        self.cpus_per_job = cpus_per_job
        self.timeout_per_job = timeout_per_job
        self.memory_per_job = memory_per_job
        # self.slurm_extra_options = slurm_extra_options
        self.slurm_wckey = slurm_wckey
        #
        self.script_name = script_name
        self.class_name = class_name
        self.class_args = class_args
        # tmp_dir/launcher_template.py ou .sh
        # Create a launcher_script template with the requirements
        
        
    def _exec_sample(self, X):
        X = ot.Sample(X)
        job_launcher_template = f"""import openturns as ot
from {self.script_name} import {self.class_name}
instance = {self.class_name}({self.class_args})
"""
        outputs = ot.Sample(0, self.getOutputDimension())
        with othpc.TempSimuDir(res_dir=".", prefix="tmp_", cleanup=True) as tmp_dir:
            # Create job_launchers 
            for i, x in enumerate(X):
                ot.Sample.BuildFromPoint(x).exportToCSVFile(f"xsample_{i}.csv")
                specific_string = f"""
x = ot.Sample.ImportFromCSVFile("xsample_{i}.csv")
y = instance(x)
y.exportToCSVFile(f"ysample_{i}.csv")
"""
                job_launcher_string = job_launcher_template + specific_string
                # Write the job_launcher
                with open(f"job_launcher_{i}.py", "w") as file:
                    file.write(job_launcher_string)

            slurm = Slurm(
                array=range(len(X)),
                nodes=self.nodes_per_job,
                cpus_per_task=self.cpus_per_job,
                mem=self.memory_per_job,
                job_name=self.class_name,
                output=f"logs/{Slurm.JOB_ARRAY_MASTER_ID}_{Slurm.JOB_ARRAY_ID}.out",
                time=datetime.timedelta(minutes=self.timeout_per_job),
                wckey=self.slurm_wckey
            )
            # slurm.add_cmd(f"#SBATCH {extra_option}")
            slurm.sbatch("python job_launcher_$SLURM_ARRAY_TASK_ID.py", convert=False)
            # Wait until finished
            time.sleep(60)

            
            
            for i in range(len(X)):
                outputs.add(ot.Sample.ImportFromCSVFile(f"ysample_{i}.csv"))
        return outputs
        

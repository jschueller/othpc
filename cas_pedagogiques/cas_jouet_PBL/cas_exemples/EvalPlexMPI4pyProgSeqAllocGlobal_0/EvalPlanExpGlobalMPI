#!/usr/bin/env python3

import sys
import os

sys.path.append("./")
from mpi4py import MPI
import openturns as ot
from multiprocessing import Process, Pool
import multiprocessing
import pandas as pd
from optparse import OptionParser
import importlib
import numpy as np

sys.path.insert(0, "../../lib_py")
import myLib.toolBox as tb

comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()


def process_cmd_line(argv):
    """Processes the passed command line arguments."""
    parser = OptionParser(
        usage="usage: %prog DE.csv module_exec.py [options]",
        description="Run an CS and OM (optional) Design Experience plan, each point is launched with sbatch",
    )

    parser.add_option(
        "--auto-restart",
        action="store_true",
        dest="auto_restart",
        default=False,
        help="relauch eval of exp plan while point need restart (manage through needRestart csv file)",
    )

    (options, args) = parser.parse_args(argv)
    return options, args


class DE:
    """
    class to manage CS DE csv file based
    """

    def __init__(self, DE_csv, classExec, delimiter=";"):
        self.DE_csv = DE_csv
        # exec function use to run each point
        self._exec = classExec._exec
        self.classExec = classExec
        self.SuccessfullRun_f = classExec.successfullRunFileName
        self.NeedRestartRun_f = classExec.needRestartRunFileName
        self.FailedRun_f = classExec.failedRunFileName
        self.case_path = classExec.casePath

        if rank == 0:
            self.df_de = pd.read_csv(self.DE_csv, delimiter=delimiter)
        else:
            self.df_de = None
        self.df_de = comm.bcast(self.df_de, root=0)

        self.buildDictPoints()

    def buildDictPoints(self):
        """
        method to build a list of dictionnary, one dict per point
        """
        dicts = []
        df_de = self.df_de
        sample = []

        for p_id in range(len(df_de)):
            p_dict = {}
            point = []
            for k_id in range(len(df_de.columns)):
                key = df_de.columns[k_id]
                p_dict[key] = float(df_de.iloc[p_id, k_id])
                point.append(float(df_de.iloc[p_id, k_id]))

            failRunid = self.checkNonPreviousRunFail(p_dict)
            if failRunid == None:  # launch eval only if previous run has not fail
                dicts.append(p_dict)
                sample.append(point)

            self.dicts = dicts
            self.sampleToEvaluate = sample

    def checkNonPreviousRunFail(self, dict_inputs):
        """
        For a given point, check run eval has not previously fail
        """

        check_run_id = tb.checkSuccessfullRun(
            case_path=self.case_path, file_basename=self.FailedRun_f, **dict_inputs
        )
        return check_run_id

    def checkNeedRestart(self):
        """
        method to check if at least a run need restart
        """
        df_de = self.df_de

        needRestart = False

        for p_id in range(len(df_de)):
            p_dict = {}
            for k_id in range(len(df_de.columns)):
                key = df_de.columns[k_id]
                p_dict[key] = float(df_de.iloc[p_id, k_id])

            failRunid = self.checkNonPreviousRunFail(p_dict)
            check_run_id = tb.checkSuccessfullRun(
                case_path=self.case_path, file_basename=self.SuccessfullRun_f, **p_dict
            )
            checkRestart_run_id = tb.checkSuccessfullRun(
                case_path=self.case_path, file_basename=self.NeedRestartRun_f, **p_dict
            )

            if check_run_id != None:
                if check_run_id == checkRestart_run_id:
                    if failRunid == None:
                        needRestart = True

        return needRestart

    def runDE(self):
        """
        method to launch DE eval
        """

        data_size = len(self.dicts)
        chunk_size = data_size // size

        local_result = np.zeros(
            (len(self.dicts), self.classExec.getOutputDimension()), dtype="float"
        )
        global_result = np.zeros(
            (len(self.dicts), self.classExec.getOutputDimension()), dtype="float"
        )

        # dispatch sample to evaluat points on different rank
        lb = int(rank * chunk_size)
        ub = int((rank + 1) * chunk_size)
        for i in range(lb, ub):
            X = self.sampleToEvaluate[i]
            Y = self._exec(X)
            local_result[i] = Y

        # evaluate residuals points, dispatch one point per rank
        residuals_size = data_size - size * chunk_size
        lb = int(rank * 1) + size * chunk_size
        ub = lb + 1
        for i in range(lb, ub):
            if i < data_size:
                X = self.sampleToEvaluate[i]
                Y = self._exec(X)
                local_result[i] = Y

        # if rank == 0:
        #    for i in range(size * chunk_size, data_size):
        #        X = self.sampleToEvaluate[i]
        #        Y = self._exec(X)
        #        local_result[i] = Y

        # gather the resutl on master rank
        comm.Barrier()
        comm.Reduce(
            [local_result, MPI.DOUBLE], [global_result, MPI.DOUBLE], op=MPI.SUM, root=0
        )

        # output result on a file
        if rank == 0:
            global_sample = ot.Sample(global_result)
            global_sample.setDescription(self.classExec.getOutputDescription())
            input_sample = ot.Sample(self.sampleToEvaluate)
            input_sample.setDescription(self.classExec.getInputDescription())
            input_sample.stack(global_sample)
            input_sample.exportToCSVFile("PLEXEvaluationResult.csv")

        comm.Barrier()


def main(args, options, funcExec):

    # Create a Design Experiment object
    de = DE(args[0], funcExec)

    # run the design of experiment
    de.runDE()

    comm.Barrier()  # wait all process to finish their subsample evaluation

    if options.auto_restart:
        needRestart = de.checkNeedRestart()
        while needRestart == True:
            # read control file to check user inloop action
            if os.path.isfile("control_file"):
                with open("control_file", "r") as f:
                    d = str(f.readlines()[-1]).replace("\n", "")
                    if d.split(" ")[-1] == "stop":
                        needRestart = False

                os.remove("control_file")

            if needRestart == True:
                de.runDE()
                needRestart = de.checkNeedRestart()


if __name__ == "__main__":
    options, args = process_cmd_line(sys.argv[1:])

    # load module and environement of given _exec module
    module_def_exec = importlib.import_module(args[1].replace(".py", ""))
    funcExec = module_def_exec.funcPythonCode()

    # launch main loop
    main(args, options, funcExec)
